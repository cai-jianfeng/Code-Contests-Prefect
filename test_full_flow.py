#!/usr/bin/env python3
"""
测试完整corner case生成流程的简单脚本
"""

import sys
sys.path.append('/aiarena/gpfs')

from corner_case_gen_parallel import OpenAIClient, Corner_Case_Model

def test_corner_case_generation():
    """测试corner case生成流程"""
    
    try:
        API_BASE = "https://lonlie.plus7.plus/v1"
        API_KEY = "sk-JhC2NWrNAARa9lbPA388E4250f5c4aE19eB590967c22F9B9"
        
        client = OpenAIClient(API_BASE, API_KEY)
        
        # 测试消息
        messages = [
            {"role": "system", "content": "You are a helpful assistant. You must strictly follow the user's instructions."},
            {"role": "user", "content": """
You are an expert in generating corner cases for programming problems.

Given the following problem statement, your tasks are:
1. Carefully read and understand the problem statement.
2. Identify and summarize the constraints of the input data.
3. Analyze the problem to anticipate common mistakes or edge cases that contestants might overlook.
4. Based on your analysis, design and output targeted adversarial corner cases (only provide the input for each case, as the output will be generated by the reference solution).

Problem Statement:
Given two integers a and b, output their sum.

Please provide a list of diverse and challenging input cases that are likely to break incorrect solutions or expose subtle bugs. 

**Strictly follow these output requirements:**
- Your response must be in JSON format matching this structure:
  {
    "replace_corner_case_list": [],
    "add_corner_case_list": ["test_case_1", "test_case_2", ...]
  }
- For initial generation, put all corner cases in the `add_corner_case_list` field, and leave `replace_corner_case_list` empty.
- `replace_corner_case_list` is used for correcting previously generated corner cases (leave empty for first-time generation).
- `add_corner_case_list` contains new corner cases to be added.
- Each test case should be a complete input case as a string.
- If special characters are needed (such as newlines), escape them properly (e.g., \\n for newlines).
- Use spaces or newlines inside the string as required by the problem's input format.
"""}
        ]
        
        print("Testing corner case generation...")
        
        result = client.generate_corner_case(messages)
        
        if result is None:
            print("✗ Corner case generation failed - returned None")
            return False
        
        print("✓ Corner case generation successful!")
        print(f"Result type: {type(result)}")
        print(f"Replace list: {result.replace_corner_case_list}")
        print(f"Add list: {result.add_corner_case_list}")
        print(f"Number of corner cases generated: {len(result.add_corner_case_list)}")
        
        # 测试parse_corner_cases_from_Corner_Case_Model功能
        print("\nTesting parse function...")
        original_cases = []
        from corner_case_gen_parallel import CornerCaseGenerator
        
        # 创建一个临时的生成器来测试解析功能
        class MockConfig:
            class ProcessingConfig:
                max_iterations = 3
                max_sample_solutions = 3
                use_all_solutions = False
            processing_config = ProcessingConfig()
        
        generator = CornerCaseGenerator(client, None, MockConfig())
        
        parsed_cases = generator.parse_corner_cases_from_Corner_Case_Model(
            original_cases, result, "test_sample_id"
        )
        
        print(f"✓ Parse function successful!")
        print(f"Parsed cases: {len(parsed_cases)} cases")
        print(f"First few cases: {parsed_cases[:3] if parsed_cases else 'None'}")
        
        return True
        
    except Exception as e:
        print(f"✗ Test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_corner_case_generation()
    if success:
        print("\n🎉 Corner case generation test passed!")
    else:
        print("\n❌ Corner case generation test failed!")
