#!/usr/bin/env python3
"""
测试OpenAI API调用的简单脚本
"""

import sys
sys.path.append('/aiarena/gpfs')

from openai import OpenAI
from pydantic import BaseModel
from typing import List

class Corner_Case_Model(BaseModel):
    replace_corner_case_list: List[str]
    add_corner_case_list: List[str]

def test_openai_api():
    """测试OpenAI API调用"""
    
    try:
        API_BASE = "https://lonlie.plus7.plus/v1"
        API_KEY = "sk-JhC2NWrNAARa9lbPA388E4250f5c4aE19eB590967c22F9B9"
        
        client = OpenAI(base_url=API_BASE, api_key=API_KEY)
        
        # 测试消息
        messages = [
            {"role": "system", "content": "You are a helpful assistant. You must strictly follow the user's instructions."},
            {"role": "user", "content": """
You are an expert in generating corner cases for programming problems.

Given the following problem statement, your tasks are:
1. Carefully read and understand the problem statement.
2. Identify and summarize the constraints of the input data.
3. Analyze the problem to anticipate common mistakes or edge cases that contestants might overlook.
4. Based on your analysis, design and output targeted adversarial corner cases (only provide the input for each case, as the output will be generated by the reference solution).

Problem Statement:
Given two integers a and b, output their sum.

Please provide a list of diverse and challenging input cases that are likely to break incorrect solutions or expose subtle bugs. 

**Strictly follow these output requirements:**
- Your response must be in JSON format matching this structure:
  {
    "replace_corner_case_list": [],
    "add_corner_case_list": ["test_case_1", "test_case_2", ...]
  }
- For initial generation, put all corner cases in the `add_corner_case_list` field, and leave `replace_corner_case_list` empty.
- `replace_corner_case_list` is used for correcting previously generated corner cases (leave empty for first-time generation).
- `add_corner_case_list` contains new corner cases to be added.
- Each test case should be a complete input case as a string.
- If special characters are needed (such as newlines), escape them properly (e.g., \\n for newlines).
- Use spaces or newlines inside the string as required by the problem's input format.
"""}
        ]
        
        print("Testing OpenAI API call...")
        
        response = client.beta.chat.completions.parse(
            model="o4-mini",
            messages=messages,
            max_tokens=1000,
            response_format=Corner_Case_Model
        )
        
        result = response.choices[0].message.parsed
        
        print("✓ API call successful!")
        print(f"Response type: {type(result)}")
        print(f"Replace list: {result.replace_corner_case_list}")
        print(f"Add list: {result.add_corner_case_list}")
        print(f"Number of corner cases generated: {len(result.add_corner_case_list)}")
        
        return True
        
    except Exception as e:
        print(f"✗ API call failed: {e}")
        return False

if __name__ == "__main__":
    success = test_openai_api()
    if success:
        print("\n🎉 OpenAI API test passed!")
    else:
        print("\n❌ OpenAI API test failed!")
